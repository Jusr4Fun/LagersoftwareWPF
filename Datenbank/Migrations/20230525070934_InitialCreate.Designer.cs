// <auto-generated />
using Datenbank;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Datenbank.Migrations
{
    [DbContext(typeof(LagerverwaltungDBContext))]
    [Migration("20230525070934_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.HasSequence<int>("ItemIds");

            modelBuilder.Entity("Datenbank.Models.CableType", b =>
                {
                    b.Property<int>("CableTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CableTypeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CableTypeID");

                    b.ToTable("CableType");
                });

            modelBuilder.Entity("Datenbank.Models.FormFactor", b =>
                {
                    b.Property<int>("FormFactorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FormFactorName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("FormFactorID");

                    b.ToTable("FormFactor");
                });

            modelBuilder.Entity("Datenbank.Models.Item", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NEXT VALUE FOR ItemIds)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("LocationID");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Datenbank.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("LocationID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Datenbank.Models.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ManufacturerID");

                    b.ToTable("Manufacturer");
                });

            modelBuilder.Entity("Datenbank.Models.NetworkDeviceType", b =>
                {
                    b.Property<int>("NetworkDeviceTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NetworkDeviceTypeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("NetworkDeviceTypeID");

                    b.ToTable("NetworkDeviceType");
                });

            modelBuilder.Entity("Datenbank.Models.PeripheralType", b =>
                {
                    b.Property<int>("PeripheralTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PeripheralTypeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PeripheralTypeID");

                    b.ToTable("PeripheralType");
                });

            modelBuilder.Entity("Datenbank.Models.ScreenSize", b =>
                {
                    b.Property<int>("ScreenSizeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("ScreenDiagonal")
                        .HasColumnType("double");

                    b.Property<int>("ScreenHeight")
                        .HasColumnType("int");

                    b.Property<int>("ScreenWidth")
                        .HasColumnType("int");

                    b.HasKey("ScreenSizeID");

                    b.ToTable("ScreenSize");
                });

            modelBuilder.Entity("Datenbank.Models.Cable", b =>
                {
                    b.HasBaseType("Datenbank.Models.Item");

                    b.Property<int>("CableTypeID")
                        .HasColumnType("int");

                    b.Property<double>("Length")
                        .HasColumnType("double");

                    b.HasIndex("CableTypeID");

                    b.ToTable("Cable", (string)null);
                });

            modelBuilder.Entity("Datenbank.Models.Device", b =>
                {
                    b.HasBaseType("Datenbank.Models.Item");

                    b.Property<int>("ManufacturerID")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasIndex("ManufacturerID");

                    b.ToTable((string)null);
                });

            modelBuilder.Entity("Datenbank.Models.Other", b =>
                {
                    b.HasBaseType("Datenbank.Models.Item");

                    b.Property<string>("DetailedDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Other", (string)null);
                });

            modelBuilder.Entity("Datenbank.Models.Peripheral", b =>
                {
                    b.HasBaseType("Datenbank.Models.Item");

                    b.Property<int>("PeriphalTypeID")
                        .HasColumnType("int");

                    b.Property<int>("PeripheralTypeID")
                        .HasColumnType("int");

                    b.HasIndex("PeripheralTypeID");

                    b.ToTable("Peripheral", (string)null);
                });

            modelBuilder.Entity("Datenbank.Models.Display", b =>
                {
                    b.HasBaseType("Datenbank.Models.Device");

                    b.Property<int>("ScreenSizeID")
                        .HasColumnType("int");

                    b.HasIndex("ScreenSizeID");

                    b.ToTable("Display", (string)null);
                });

            modelBuilder.Entity("Datenbank.Models.NetworkDevice", b =>
                {
                    b.HasBaseType("Datenbank.Models.Device");

                    b.Property<string>("MacAdress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NetworkDeviceTypeID")
                        .HasColumnType("int");

                    b.HasIndex("NetworkDeviceTypeID");

                    b.ToTable("NetworkDevice", (string)null);
                });

            modelBuilder.Entity("Datenbank.Models.PC", b =>
                {
                    b.HasBaseType("Datenbank.Models.Device");

                    b.Property<string>("InstalledKey")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("PC", (string)null);
                });

            modelBuilder.Entity("Datenbank.Models.StorageDevice", b =>
                {
                    b.HasBaseType("Datenbank.Models.Device");

                    b.Property<double>("Capacity")
                        .HasColumnType("double");

                    b.Property<int>("FormFactorID")
                        .HasColumnType("int");

                    b.HasIndex("FormFactorID");

                    b.ToTable("StorageDevice", (string)null);
                });

            modelBuilder.Entity("Datenbank.Models.Item", b =>
                {
                    b.HasOne("Datenbank.Models.Location", "Location")
                        .WithMany("Item")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Datenbank.Models.Cable", b =>
                {
                    b.HasOne("Datenbank.Models.CableType", "CableType")
                        .WithMany("Cable")
                        .HasForeignKey("CableTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CableType");
                });

            modelBuilder.Entity("Datenbank.Models.Device", b =>
                {
                    b.HasOne("Datenbank.Models.Manufacturer", "Manufacturer")
                        .WithMany("Device")
                        .HasForeignKey("ManufacturerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("Datenbank.Models.Peripheral", b =>
                {
                    b.HasOne("Datenbank.Models.PeripheralType", "PeripheralType")
                        .WithMany("Peripheral")
                        .HasForeignKey("PeripheralTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PeripheralType");
                });

            modelBuilder.Entity("Datenbank.Models.Display", b =>
                {
                    b.HasOne("Datenbank.Models.ScreenSize", "ScreenSize")
                        .WithMany("Display")
                        .HasForeignKey("ScreenSizeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScreenSize");
                });

            modelBuilder.Entity("Datenbank.Models.NetworkDevice", b =>
                {
                    b.HasOne("Datenbank.Models.NetworkDeviceType", "NetworkDeviceType")
                        .WithMany("NetworkDevice")
                        .HasForeignKey("NetworkDeviceTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NetworkDeviceType");
                });

            modelBuilder.Entity("Datenbank.Models.StorageDevice", b =>
                {
                    b.HasOne("Datenbank.Models.FormFactor", "FormFactor")
                        .WithMany("StorageDevice")
                        .HasForeignKey("FormFactorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormFactor");
                });

            modelBuilder.Entity("Datenbank.Models.CableType", b =>
                {
                    b.Navigation("Cable");
                });

            modelBuilder.Entity("Datenbank.Models.FormFactor", b =>
                {
                    b.Navigation("StorageDevice");
                });

            modelBuilder.Entity("Datenbank.Models.Location", b =>
                {
                    b.Navigation("Item");
                });

            modelBuilder.Entity("Datenbank.Models.Manufacturer", b =>
                {
                    b.Navigation("Device");
                });

            modelBuilder.Entity("Datenbank.Models.NetworkDeviceType", b =>
                {
                    b.Navigation("NetworkDevice");
                });

            modelBuilder.Entity("Datenbank.Models.PeripheralType", b =>
                {
                    b.Navigation("Peripheral");
                });

            modelBuilder.Entity("Datenbank.Models.ScreenSize", b =>
                {
                    b.Navigation("Display");
                });
#pragma warning restore 612, 618
        }
    }
}
